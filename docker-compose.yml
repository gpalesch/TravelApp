services:
  destination-service:
    image: "docker-spring-boot-destination-service:latest"
    build:
      context: ./destination-service
      dockerfile: Dockerfile 
    container_name: destination-service
    environment:
      - POSTGRES_USER=destinationUser
      - POSTGRES_PASSWORD=destinationPassword
    ports:
      - "8080:8080"
    depends_on:
      - destinationdb
    networks:
      - mynetwork

  destinationdb:
    image: postgres:latest
    container_name: destination-db
    environment:
      - POSTGRES_DB=destinationdb
      - POSTGRES_USER=destinationUser
      - POSTGRES_PASSWORD=destinationPassword
    ports:
      - "5432:5432"
    volumes:
      - destination-db-data:/var/lib/postgresql/data
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U destinationUser -d destinationdb"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  customer-service:
    image: "docker-spring-boot-customer-service:latest"
    build:
      context: ./customer-service
      dockerfile: Dockerfile 
    container_name: customer-service
    environment:
      - POSTGRES_USER=customerUser
      - POSTGRES_PASSWORD=customerPassword
    ports:
      - "8081:8080"
    depends_on:
      - customerdb
    networks:
      - mynetwork

  customerdb:
    image: postgres:latest
    container_name: customer-db
    environment:
      - POSTGRES_DB=customerdb
      - POSTGRES_USER=customerUser
      - POSTGRES_PASSWORD=customerPassword
    ports:
      - "5433:5432"
    volumes:
      - customer-db-data:/var/lib/postgresql/data
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U customerUser -d customerdb"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  booking-service:
    image: "docker-spring-boot-booking-service:latest"
    build:
      context: ./booking-service
      dockerfile: Dockerfile 
    container_name: booking-service
    environment:
      - POSTGRES_USER=bookingUser
      - POSTGRES_PASSWORD=boookingPassword
    ports:
      - "8082:8080"
    depends_on:
      - bookingdb
    networks:
      - mynetwork

  bookingdb:
    image: postgres:latest
    container_name: booking-db
    environment:
      - POSTGRES_DB=bookingdb
      - POSTGRES_USER=bookingUser
      - POSTGRES_PASSWORD=bookingPassword
    ports:
      - "5434:5432"
    volumes:
      - booking-db-data:/var/lib/postgresql/data
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U bookingUser -d bookingdb"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s

  auth-service:
    image: "docker-spring-boot-auth-service:latest"
    build:
      context: ./auth-service
      dockerfile: Dockerfile 
    container_name: auth-service
    environment:
      - POSTGRES_USER=authUser
      - POSTGRES_PASSWORD=authPassword
    ports:
      - "8083:8080"
    depends_on:
      - authdb
    networks:
      - mynetwork

  authdb:
    image: postgres:latest
    container_name: auth-db
    environment:
      - POSTGRES_DB=authdb
      - POSTGRES_USER=authUser
      - POSTGRES_PASSWORD=authPassword
    ports:
      - "5435:5432"
    volumes:
      - auth-db-data:/var/lib/postgresql/data
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authUser -d authdb"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 5s



volumes:
  destination-db-data:
  customer-db-data:
  booking-db-data:
  auth-db-data:

networks:
  mynetwork:
    driver: bridge